{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Trevis\\\\Documents\\\\github\\\\billing-system\\\\src\\\\components\\\\Details.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleEdit = this.handleEdit.bind(this);\n  }\n\n  handleEdit(e, field) {\n    let item = this.props.item;\n    item[field] = e.target.value;\n    this.props.updateSelectedItem(item);\n  }\n\n  render() {\n    const empty = this.props.item === null; // This should always be props.item and not state.item! \n    // Fetching state will only cause old data to persist and will not update to a newly selected item\n\n    const item = this.props.item;\n    const nonEditableFields = new Set([\"id\", \"name\"]);\n    let details; // console.log(item)\n\n    details = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered-label\",\n        children: empty ? \"Modify values by editing the input fields below\" : \"No item selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: \"workspace-container-child rounded-border\",\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: empty ? \"DETAILS\" : item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), details]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Details;","map":{"version":3,"names":["React","Details","Component","constructor","props","handleEdit","bind","e","field","item","target","value","updateSelectedItem","render","empty","nonEditableFields","Set","details","name"],"sources":["C:/Users/Trevis/Documents/github/billing-system/src/components/Details.js"],"sourcesContent":["import React from \"react\"\r\n\r\nclass Details extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleEdit = this.handleEdit.bind(this)\r\n    }\r\n\r\n    handleEdit(e, field) {\r\n        let item = this.props.item\r\n        item[field] = e.target.value\r\n        this.props.updateSelectedItem(item)\r\n    }\r\n\r\n    render() {\r\n        const empty = this.props.item === null\r\n        // This should always be props.item and not state.item! \r\n        // Fetching state will only cause old data to persist and will not update to a newly selected item\r\n        const item = this.props.item\r\n        const nonEditableFields = new Set([\"id\", \"name\"])\r\n\r\n        let details\r\n\r\n        // console.log(item)\r\n\r\n        details = (\r\n            <div>\r\n                <div className=\"centered-label\">\r\n                    {   \r\n                        (empty)\r\n                        ? \"Modify values by editing the input fields below\"\r\n                        : \"No item selected\"\r\n                    }\r\n                </div>\r\n                {/* <ul className=\"details-container\">\r\n                    {Object.keys(item).map(\r\n                        prop => (\r\n                            <li key={prop}>\r\n                                <label>{prop.toUpperCase()}</label>\r\n                                {   \r\n                                    // Check if field is editable\r\n                                    (nonEditableFields.has(prop)) \r\n                                    ? <input value={item[prop]} disabled />\r\n                                    : <input defaultValue={item[prop]} onChange={(e) => this.handleEdit(e, prop)} key={item.id} />\r\n                                    // Changing the key to the current item's ID will cause the default value to re-render.\r\n                                    // If we do not do this, the input element will not refresh and old data will persist.\r\n                                }\r\n                            </li>\r\n                        )\r\n                    )}\r\n                </ul> */}\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <fieldset className=\"workspace-container-child rounded-border\">\r\n                <legend><h1>{(empty) ? \"DETAILS\" : item.name}</h1></legend>\r\n                {details}\r\n            </fieldset>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;EAClCC,WAAW,CAACC,KAAD,EAAQ;IACf,MAAMA,KAAN;IAEA,KAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;EACH;;EAEDD,UAAU,CAACE,CAAD,EAAIC,KAAJ,EAAW;IACjB,IAAIC,IAAI,GAAG,KAAKL,KAAL,CAAWK,IAAtB;IACAA,IAAI,CAACD,KAAD,CAAJ,GAAcD,CAAC,CAACG,MAAF,CAASC,KAAvB;IACA,KAAKP,KAAL,CAAWQ,kBAAX,CAA8BH,IAA9B;EACH;;EAEDI,MAAM,GAAG;IACL,MAAMC,KAAK,GAAG,KAAKV,KAAL,CAAWK,IAAX,KAAoB,IAAlC,CADK,CAEL;IACA;;IACA,MAAMA,IAAI,GAAG,KAAKL,KAAL,CAAWK,IAAxB;IACA,MAAMM,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,IAAD,EAAO,MAAP,CAAR,CAA1B;IAEA,IAAIC,OAAJ,CAPK,CASL;;IAEAA,OAAO,gBACH;MAAA,uBACI;QAAK,SAAS,EAAC,gBAAf;QAAA,UAESH,KAAD,GACE,iDADF,GAEE;MAJV;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;IA6BA,oBACI;MAAU,SAAS,EAAC,0CAApB;MAAA,wBACI;QAAA,uBAAQ;UAAA,UAAMA,KAAD,GAAU,SAAV,GAAsBL,IAAI,CAACS;QAAhC;UAAA;UAAA;UAAA;QAAA;MAAR;QAAA;QAAA;QAAA;MAAA,QADJ,EAEKD,OAFL;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAMH;;AA3DiC;;AA8DtC,eAAehB,OAAf"},"metadata":{},"sourceType":"module"}